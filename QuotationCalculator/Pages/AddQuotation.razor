@page "/addquotation"
@using ClassLibraryModel;
@inject IJSRuntime JSRuntime

<PageTitle>Add Quotation</PageTitle>

<h1>Add Quotation</h1>

<EditForm Model="quotation">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="QuotationId">QT#</label>
        <span id="QuotationId">@quotation.QuotationId</span>
    </div>

    <div class="form-row">

        <div class="form-group">
            <label for="MobileNumber">Mobile Number</label>
            <InputNumber id="MobileNumber" placeholder="Enter phone number" @bind-Value="customer.MobileNumber" />
        </div>

    <div class="form-group">
        <label for="CustomerName">Customer Name</label>
        <InputText id="CustomerName" @bind-Value="customer.CustomerName" />
    </div>

    </div>
        <div class="form-group address-group">
            <label for="Address">Address</label>
            <InputTextArea id="Address" @bind-Value="customer.Address" />
        </div>


    <div class="form-group date-group">
        <label for="Date">Date</label>
        <InputDate id="Date" @bind-Value="quotation.Date" />
    </div>

    <div>
        <label for="Remarks">Remarks</label>
        <InputTextArea id="Remarks" @bind-Value="quotation.Remarks" />
    </div>

    <h3>Add Item Details</h3>

    <div class="form-row">
        <div class="form-group select-group">
            <label for="Type">Select Type</label>
            <select name="Type" @onchange="OnWindowChanged">
                <option value="none" selected disabled hidden>Select an Option</option>
                @foreach (var win in WindowList)
                {
                    <option value="@win.WindowsId">@win.Type -- Rate: @win.Rate</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label for="Window Price">Window Price</label>
            <InputNumber id="Window Price" @bind-Value="window.Rate" />
        </div>
    </div>

    <div class="form-row">
        <div class="form-group select-group">
            <label for="GlassSelection">Select Glass</label>
            <select id="GlassSelection" @onchange="OnGlassChanged">
                <option value="0" selected disabled hidden>Select Glass</option>
                @foreach (var glass in glassList)
                {
                    <option value="@glass.GId">@glass.GColor - Rate: @glass.Rate, Thickness: @glass.Thickness</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label for="Glass Price">Glass Price</label>
            <InputNumber id="Glass Price" @bind-Value="glassDetails.Rate" />
        </div>
    </div>

    <div class="form-row">
        <div class="form-group">
            <label for="Width">Width</label>
            <InputNumber id="Width" @bind-Value="newItem.Width" />
        </div>

        <div class="form-group">
            <label for="Height">Height</label>
            <InputNumber id="Height" @bind-Value="newItem.Height" />
        </div>
        <div class="form-group">
            <label for="QTY">Quantity</label>
            <InputNumber id="QTY" @bind-Value="newItem.QTY" />
        </div>
    </div>


    <button type="button" @onclick="AddItemToList">Add Item to List</button>

    <h3>Items List</h3>
    <table class="item-table">
        <thead>
            <tr>
                <th>Qty</th>
                <th>Type</th>
                <th>Width</th>
                <th>Height</th>
                <th>SQFT</th>
                <th>3W</th>
                <th>3H</th>
                <th>6W</th>
                <th>6H</th>
                <th>3"SQFT</th>
                <th>6"SQFT</th>
                <th>Glass Color</th>
                <th>Window Unit Price</th>
                <th>Glass Unit Price</th>
                <th>Windows Amount</th>
                <th>Glass Amount</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in quotation.Items)
            {
                <tr>
                    <td>@item.QTY</td>
                    <td>@item.Window.Type</td>
                    <td>@item.Width</td>
                    <td>@item.Height</td>
                    <td>@item.SQFT</td>
                    <td>@item.W3</td>
                    <td>@item.H3</td>
                    <td>@item.W6</td>
                    <td>@item.H6</td>
                    <td>@item.SQFT3</td>
                    <td>@item.SQFT6</td>
                    <td>@item.WindowsAmount</td>
                    <td>@item.Window.Rate</td
                    <td>@item.Glass.Rate</td>
                    <td>@item.WindowsAmount</td>
                    <td>@item.GlassAmount</td>
                        <button @onclick="() => DeleteItem(item)" class="btn btn-bin">
                            <i class="fas fa-trash-alt"></i>
                        </button>
                </tr>
            }
        </tbody>
    </table>

    <button class="Submit-button" @onclick="OnSubmit" type="submit">Submit</button>
</EditForm>

@code {
    private QuotationDetails quotation = new QuotationDetails();
    private ItemDetails newItem = new ItemDetails();
    private WindowDetails window = new WindowDetails();
    private CustomerDetails customer = new CustomerDetails();
    private GlassDetails glassDetails = new GlassDetails();

    private string selectedWindowType="";
    int selectedGlassId { get; set; }
    List<GlassDetails> glassList = DalGlassDetails.GetAllGlassDetails();
    List<WindowDetails> WindowList = DalWindowDetails.GetAllWindowDetails();


    private float CalculateSQFT(float w,float h)
    {
        return (w * h) / 144;
    }
    private float CalculateStandard(float  orignalValue,int standard)
    {
        var remainder = orignalValue %  standard;
        if(remainder==0)
        {
            return orignalValue;
        }
        else
        {
            return orignalValue +(standard- remainder);
        }
    }
    private void HandleGlassSelection()
    {
        GlassDetails selectedGlass = new GlassDetails();
        foreach (var glass in glassList)
        {
            if (selectedGlassId == glass.GId)
            {
                selectedGlass = glass;
            }
        }

        if (selectedGlass != null)
        {
            newItem.Glass = selectedGlass;
        }
        else
        {
            newItem.Glass = new GlassDetails();
        }
    }
    private void CalculateAllValues()
    {
        newItem.Window = window;
        quotation.CustomerMobile = customer.MobileNumber;
        newItem.GlassId = glassDetails.GId;
        newItem.QuotationId = quotation.QuotationId;
        newItem.WindowsId = window.WindowsId;
        newItem.GlassRate = glassDetails.Rate;
        newItem.WindowsRate = window.Rate;
        newItem.SQFT = CalculateSQFT(newItem.Width, newItem.Height);
        newItem.W3 = CalculateStandard(newItem.Width, 3);
        newItem.H3 = CalculateStandard(newItem.Height, 3);
        newItem.W6 = CalculateStandard(newItem.Width, 6);
        newItem.H6 = CalculateStandard(newItem.Height, 6);
        newItem.SQFT3 = CalculateSQFT(newItem.W3, newItem.H3);
        newItem.SQFT6 = CalculateSQFT(newItem.W6, newItem.H6);
        newItem.WindowsAmount=(newItem.SQFT3*100)*newItem.QTY;
        newItem.GlassAmount = (newItem.SQFT3 * 200)*newItem.QTY;
    }
    private void AddItemToList()
    {
        CalculateAllValues();
        HandleGlassSelection();
        if (window.Type == null || newItem.Width == 0 || newItem.Height == 0 || newItem.Glass == null
            || customer.MobileNumber==0
            || string.IsNullOrEmpty(customer.CustomerName))
        {
            JSRuntime.InvokeVoidAsync("alert", "Please Enter Data!");
        }

        else
        {
            if (quotation.Items.Count == 0)
            {
                quotation.Items.Add(newItem);
                newItem = new ItemDetails();
                window = new WindowDetails();
                glassDetails = new GlassDetails();
            }
            else
            {
                bool itemExists = false;
                foreach (var item in quotation.Items)
                {
                    if (item.Window.Type == window.Type && newItem.Width == item.Width && newItem.Height == item.Height && newItem.Glass == item.Glass)
                    {
                        item.QTY = item.QTY + newItem.QTY;
                        item.WindowsAmount = (newItem.SQFT3 * 100) * item.QTY;
                        item.GlassAmount = (newItem.SQFT3 * 200) * item.QTY;
                        newItem = new ItemDetails ();
                        window = new WindowDetails();
                        itemExists = true;
                        break;
                    }
                }

                if (itemExists)
                {

                    JSRuntime.InvokeVoidAsync("alert", "Quotation Updated Successfully");
                }
                else
                {
                    quotation.Items.Add(newItem);
                    newItem = new ItemDetails ();
                    window = new WindowDetails();
                }
            }     
        }

    }
    protected override void OnInitialized()
    {
        quotation.Date = DateTime.Now;
    }
    private void DeleteItem(ItemDetails item)
    {
        quotation.Items.Remove(item);
    }
    private void OnWindowChanged(ChangeEventArgs e)
    {
        var selectedId = int.Parse(e.Value.ToString());
        window = WindowList.FirstOrDefault(w => w.WindowsId == selectedId);
    }
    private void OnGlassChanged(ChangeEventArgs e)
    {
        selectedGlassId = int.Parse(e.Value.ToString());
        glassDetails = glassList.FirstOrDefault(g => g.GId == selectedGlassId);
    }

    private  async Task AddCustomer(CustomerDetails model)
    {
        List<CustomerDetails> customerDetails=DalCustomerDetails.GetAllCustomerDetails();
        if(customerDetails.Count==0)
        {
            SqlParameter[] parameters = new SqlParameter[]
            {
                new SqlParameter("@CustomerName", model.CustomerName),
                new SqlParameter("@Address", model.Address),
                new SqlParameter("@MobileNumber", model.MobileNumber)
            };
            await DalCrud.SaveData("AddCustomerDetails",parameters);
        }
        else
        {
             foreach(var customer in customerDetails)
        {
            if(model.MobileNumber==customer.MobileNumber)
            {
                break;
            }
            else
            {
                SqlParameter[] parameters = new SqlParameter[]
            {
                new SqlParameter("@CustomerName", model.CustomerName),
                new SqlParameter("@Address", model.Address),
                new SqlParameter("@MobileNumber", model.MobileNumber)
            };
                await DalCrud.SaveData("AddCustomerDetails",parameters);
                await JSRuntime.InvokeVoidAsync("alert", "else");
                break;
            }
        }
        }
       

    }
    private async Task AddQuotationDetail(QuotationDetails model)
    {
        SqlParameter[] parameters = new SqlParameter[]
            {
                new SqlParameter("@QuotationId", model.QuotationId),
                new SqlParameter("@CustomerMobile", model.CustomerMobile),
                new SqlParameter("@Date", model.Date),
                new SqlParameter("@Remarks", model.Remarks)
            };
        await DalCrud.SaveData("AddQuotationDetails", parameters);
        await JSRuntime.InvokeVoidAsync("alert", "Quotation Added");
    }
    private async Task AddItemDetails(QuotationDetails model)
    {
        foreach(var item in model.Items)
        {
            SqlParameter[] parameters = new SqlParameter[]
            {
                new SqlParameter("@GlassId", item.GlassId),
                new SqlParameter("@QuotationId", item.QuotationId),
                new SqlParameter("@WindowsId", item.WindowsId),
                new SqlParameter("@Width", item.Width),
                new SqlParameter("@Height", item.Height),
                new SqlParameter("@WindowsRate", item.WindowsRate),
                new SqlParameter("@GlassRate", item.GlassRate)

            };
            await DalCrud.SaveData("AddItemDetails", parameters);
            await JSRuntime.InvokeVoidAsync("alert", "Item Added Added");

        }
    }
    private async Task OnSubmit()
    {
        await AddCustomer(customer);
        await AddQuotationDetail(quotation);
        await AddItemDetails(quotation);
        await JSRuntime.InvokeVoidAsync("alert", "Quotation Submitted Successfully");
    }
}

