@page "/addquotation"
@attribute [Authorize(Roles = "Admin,User")]

@using ClassLibraryModel;
@inject IJSRuntime JSRuntime

<PageTitle>Add Quotation</PageTitle>

<h1>Add Quotation</h1>

<EditForm Model="quotation">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="QuotationId">QT#</label>
        <span id="QuotationId">@quotation.QuotationId</span>
    </div>

    <div class="form-row">

        <div class="form-group">
            <label for="MobileNumber">Mobile Number</label>
            <InputNumber id="MobileNumber" placeholder="Enter phone number" @bind-Value="customer.MobileNumber" />
        </div>

    <div class="form-group">
        <label for="CustomerName">Customer Name</label>
        <InputText id="CustomerName" @bind-Value="customer.CustomerName" />
    </div>

    </div>
        <div class="form-group address-group">
            <label for="Address">Address</label>
            <InputTextArea id="Address" @bind-Value="customer.Address" />
        </div>


    <div class="form-group date-group">
        <label for="Date">Date</label>
        <InputDate id="Date" @bind-Value="quotation.Date" />
    </div>

    <div>
        <label for="Remarks">Remarks</label>
        <InputTextArea id="Remarks" @bind-Value="quotation.Remarks" />
    </div>

    <h3>Add Item Details</h3>

    <div class="form-row">
        <div class="form-group select-group">
            <label for="Type">Select Type</label>
            <select name="Type" @onchange="OnWindowChanged">
                <option value="none" selected disabled hidden>Select a Window</option>
                @foreach (var win in windowList)
                {
                    <option value="@win.WindowsId">@win.Type</option>
                }
            </select>
        </div>

    </div>
    @*
    <div class="form-row">
        <div class="form-group select-group">
            <label for="GlassSelection">Select Glass</label>
            <select id="GlassSelection" @onchange="OnGlassChanged">
                <option value="0" selected disabled hidden>Select a Glass</option>
                @foreach (var glass in glassList)
                {
                    <option value="@glass.GId">@glass.GColor - Rate: @glass.Rate, Thickness: @glass.Thickness</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label for="Glass Price">Glass Price</label>
            <InputNumber id="Glass Price" @bind-Value="glassDetails.Rate" />
        </div>
    </div>
    *@

    <div class="form-row">
        <div class="form-group">
            <label for="Width">Width</label>
            <InputNumber id="Width" @bind-Value="newItem.Width" />
        </div>

        <div class="form-group">
            <label for="Height">Height</label>
            <InputNumber id="Height" @bind-Value="newItem.Height" />
        </div>
        <div class="form-group">
            <label for="QTY">Quantity</label>
            <InputNumber id="QTY" @bind-Value="newItem.QTY" />
        </div>
    </div>



    <button type="button" @onclick="AddItemToList">Add Item to List</button>
    <div class="form-group">
        <h3>Items List</h3>
        @if (quotation.Items != null && quotation.Items.Any())
        {
            <table class="item-table">
                <thead>
                    <tr>
                        <th>Sr#</th>

                        <th>Type</th>
                        <th>Width</th>
                        <th>Height</th>
                        <th>Qty</th>
                        <th>SQFT</th>
                        <th>3W</th>
                        <th>3H</th>
                        <th>6W</th>
                        <th>6H</th>
                        <th>3"SQFT</th>
                        <th>6"SQFT</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in quotation.Items)
                    {
                        <tr>
                            <td>1</td>
                            <td>@item.Window.Type</td>
                            <td>@item.Width</td>
                            <td>@item.Height</td>
                            <td>@item.QTY</td>
                            <td>@item.SQFT</td>
                            <td>@item.W3</td>
                            <td>@item.H3</td>
                            <td>@item.W6</td>
                            <td>@item.H6</td>
                            <td>@item.SQFT3</td>
                            <td>@item.SQFT6</td>

                            <td>
                                <button @onclick="() => DeleteItem(item)" class="btn btn-bin">
                                    <i class="fas fa-trash-alt"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>No items to display.</p>
        }
    </div>


@*
    <div class="form-group">
    <button class="Select Material" @onclick="ShowMaterialSelection" type="button">Select Material</button>

    </div>
*@
   <div class="form-group">
        @if (showMaterialSelection)
        {
            <div class="form-row">
                <div class="form-group select-group">
                    <label for="company">Select Company</label>
                    <select name="company" @onchange="OnCompanyChanged">
                        <option value="none" selected disabled hidden>Select a Company</option>
                        @foreach (var company in companiesList)
                        {
                            <option value="@company.CompanyId">@company.CompanyName.Replace("Details", "")</option>
                        }
                    </select>
                </div>
            </div>
            <div class="form-row">
                <div class="form-group">
                    @if (showFixedTypeCard)
                    {
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title">Fixed Window</h5>
                                <div class="form-group">
                                    <label for="width">Width</label>
                                    <input type="text" id="width" class="form-control" value="@(totalWidth*2)" readonly />
                                </div>
                                <div class="form-group">
                                    <label for="height">Height</label>
                                    <input type="text" id="height" class="form-control" value="@(totalHeight*2)" readonly />
                                </div>
                                @if (company != null && company.CompanyName == "SkyPenDetails")
                                {
                                    <div class="form-group select-group">
                                        <label for="profiles">Select Profile</label>
                                        <select name="profiles" @onchange="OnProfileChanged">
                                            <option value="" selected disabled hidden>Select a Profile</option>
                                            <option value="601.1,605.1">Openable Frame 60mm/Openable Beading 5mm</option>
                                            <option value="601.1,605.3">Openable Frame 60mm/Openable Beading 12mm</option>
                                            <option value="601.1,605.4">Openable Frame 60mm/Openable Beading 16mm</option>
                                            <option value="601.1,605.5">Openable Frame 60mm/Openable Beading 20mm</option>
                                            <option value="601.2,605.12">Frame Royal(3 Chamber) 60mm/Openable Beading 5mm ROYAL</option>
                                            <option value="601.2,605.6">Frame Royal(3 Chamber) 60mm/Openable Beading 24mm ROYAL</option>
                                            <option value="601.3,605.12">Frame Royal(5 Chamber) 60mm/Openable Beading 5mm ROYAL</option>
                                            <option value="601.3,605.6">Frame Royal(5 Chamber) 60mm/Openable Beading 24mm ROYAL</option>

                                        </select>
                                    </div>

                                }
                                @if (company != null && company.CompanyName == "TurkProfilDetails")
                                {
                                    <div class="form-group select-group">
                                        <label for="profiles">Select Profile</label>
                                        <select name="profiles" @onchange="OnProfileChanged">
                                            <option value="" selected disabled hidden>Select a Profile</option>
                                            @foreach (var profile in turkProfilDetails)
                                            {
                                                <option value="@profile.ProfileCode">@profile.ProfileFunction</option>
                                            }
                                        </select>
                                    </div>
                                }
                                <div class="form-group select-group">
                                    <label for="GlassSelection">Select Glass</label>
                                    <select id="GlassSelection" @onchange="OnGlassChanged">
                                        <option value="0" selected disabled hidden>Select a Glass</option>
                                        @foreach (var glass in glassList)
                                        {
                                            <option value="@glass.GId">@glass.GColor - Rate: @glass.Rate, Thickness: @glass.Thickness</option>
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <div class="form-group">
                    @if (showOpenableTypeCard)
                    {
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title">Openable Window</h5>
                                <div class="form-group">
                                    <label for="width">Width</label>
                                    <input type="text" id="width" class="form-control" value="@(totalWidth*2)" readonly />
                                </div>
                                <div class="form-group">
                                    <label for="height">Height</label>
                                    <input type="text" id="height" class="form-control" value="@(totalHeight*2)" readonly />
                                </div>
                                @if (company != null && company.CompanyName == "SkyPenDetails")
                                {
                                    <div class="form-group select-group">
                                        <label for="profiles">Select Profile</label>
                                        <select name="profiles" @onchange="OnProfileChanged">
                                            <option value="" selected disabled hidden>Select a Profile</option>
                                            <option value="601.1,605.1">Openable Frame 60mm/Openable Beading 5mm</option>
                                            <option value="601.1,605.3">Openable Frame 60mm/Openable Beading 12mm</option>
                                            <option value="601.1,605.4">Openable Frame 60mm/Openable Beading 16mm</option>
                                            <option value="601.1,605.5">Openable Frame 60mm/Openable Beading 20mm</option>
                                            <option value="601.2,605.12">Frame Royal(3 Chamber) 60mm/Openable Beading 5mm ROYAL</option>
                                            <option value="601.2,605.6">Frame Royal(3 Chamber) 60mm/Openable Beading 24mm ROYAL</option>
                                            <option value="601.3,605.12">Frame Royal(5 Chamber) 60mm/Openable Beading 5mm ROYAL</option>
                                            <option value="601.3,605.6">Frame Royal(5 Chamber) 60mm/Openable Beading 24mm ROYAL</option>

                                        </select>
                                    </div>

                                }
                                @if (company != null && company.CompanyName == "TurkProfilDetails")
                                {
                                    <div class="form-group select-group">
                                        <label for="profiles">Select Profile</label>
                                        <select name="profiles" @onchange="OnProfileChanged">
                                            <option value="" selected disabled hidden>Select a Profile</option>
                                            @foreach (var profile in turkProfilDetails)
                                            {
                                                <option value="@profile.ProfileCode">@profile.ProfileFunction</option>
                                            }
                                        </select>
                                    </div>
                                }
                                <div class="form-group select-group">
                                    <label for="GlassSelection">Select Glass</label>
                                    <select id="GlassSelection" @onchange="OnGlassChanged">
                                        <option value="0" selected disabled hidden>Select a Glass</option>
                                        @foreach (var glass in glassList)
                                        {
                                            <option value="@glass.GId">@glass.GColor - Rate: @glass.Rate, Thickness: @glass.Thickness</option>
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
            
            <div class="form-group">
                <button class="Submit-button" @onclick="OnSubmit" type="submit">Submit</button>
            </div>
        }
   </div>


        @*

        
        @if (company != null && company.CompanyName == "SkyPenDetails")
        {
            <div class="form-group select-group">
                <label for="profiles">Select Profile</label>
                <select name="profiles" @onchange="OnProfileChanged">
                    <option value="" selected disabled hidden>Select a Profile</option>
                    @foreach (var profile in skyPenDetails)
                    {
                        <option value="@profile.ProfileCode">@profile.ProfileFunction</option>
                    }
                </select>
            </div>

        }
        @if (company != null && company.CompanyName == "TurkProfilDetails")
        {
            <div class="form-group select-group">
                <label for="profiles">Select Profile</label>
                <select name="profiles" @onchange="OnProfileChanged">
                    <option value="" selected disabled hidden>Select a Profile</option>
                    @foreach (var profile in turkProfilDetails)
                    {
                        <option value="@profile.ProfileCode">@profile.ProfileFunction</option>
                    }
                </select>
            </div>
        }
    </div>
        *@


</EditForm>



@code {

    //Objects
    private QuotationDetails quotation = new QuotationDetails();
    private ItemDetails newItem = new ItemDetails();
    private WindowDetails window = new WindowDetails();
    private CustomerDetails customer = new CustomerDetails();
    private GlassDetails glassDetails = new GlassDetails();
    private CompanyDetails company = new CompanyDetails();

    private int selectedCompanyId;
    private int selectedWindowId { get; set; }
    private int selectedGlassId { get; set; }
    private float selectedProfileId{ get; set; }
    private float selectedBeadingId{ get; set; }
    private double totalHeight;
    private double totalWidth;
    private string selectedGasketOption;

    //Flags
    private bool showMaterialSelection = false;
    private bool showFixedTypeCard = false;
    private bool showSlidingTypeCard = false;
    private bool showOpenableTypeCard = false;
    private bool showDoorTypeCard = false;
    private bool showFrontDoorTypeCard = false;

    //Lists
    private List<SkyPenDetails> skyPenDetails = new List<SkyPenDetails>();
    private List<TurkProfilDetails> turkProfilDetails = new List<TurkProfilDetails>();
    private List<GlassDetails> glassList = new List<GlassDetails>();
    private List<WindowDetails> windowList = new List<WindowDetails>();
    private List<CompanyDetails> companiesList = new List<CompanyDetails>();

    //Functions
    private float CalculateSQFT(float w,float h)
    {
        return (w * h) / 144;
    }
    private float CalculateStandard(float  orignalValue,int standard)
    {
        var remainder = orignalValue %  standard;
        if(remainder==0)
        {
            return orignalValue;
        }
        else
        {
            return orignalValue +(standard- remainder);
        }
    }
    private void HandleWindowSelection()
    {
        WindowDetails selectedWindow = new WindowDetails();
        foreach (var window in windowList)
        {
            if (selectedWindowId == window.WindowsId)
            {
                selectedWindow = window;
            }
        }
        if (selectedWindow != null)
        {
            newItem.Window = selectedWindow;
        }
        else
        {
            newItem.Window = new WindowDetails();
        }
    }
    private void HandleGlassSelection()
    {
        GlassDetails selectedGlass = new GlassDetails();
        foreach (var glass in glassList)
        {
            if (selectedGlassId == glass.GId)
            {
                selectedGlass = glass;
            }
        }
        if (selectedGlass != null)
        {
            newItem.Glass = selectedGlass;
        }
        else
        {
            newItem.Glass = new GlassDetails();
        }
    }
    private void ShowMaterialSelection()
    {
        showMaterialSelection = true;

    }
    private void CalculateAllValues()
    {
        newItem.GId = glassDetails.GId;
        newItem.QuotationId = quotation.QuotationId;
        newItem.WindowsId = window.WindowsId;
        newItem.GlassRate = glassDetails.Rate;
        newItem.WindowsRate = window.Rate;
        newItem.SQFT = CalculateSQFT(newItem.Width, newItem.Height);
        newItem.W3 = CalculateStandard(newItem.Width, 3);
        newItem.H3 = CalculateStandard(newItem.Height, 3);
        newItem.W6 = CalculateStandard(newItem.Width, 6);
        newItem.H6 = CalculateStandard(newItem.Height, 6);
        newItem.SQFT3 = CalculateSQFT(newItem.W3, newItem.H3);
        newItem.SQFT6 = CalculateSQFT(newItem.W6, newItem.H6);
        newItem.WindowsAmount=(newItem.SQFT3*100)*newItem.QTY;
        newItem.GlassAmount = (newItem.SQFT3 * 200)*newItem.QTY;
    }
    private void AddItemToList()
    {

        HandleGlassSelection();
        HandleWindowSelection();
        CalculateAllValues();
        totalHeight +=Math.Ceiling(newItem.Height/12)*newItem.QTY;
        totalWidth += Math.Ceiling(newItem.Width/12) * newItem.QTY;
        showMaterialSelection = true;

        if (window.Type == "Fix")
        {
            showFixedTypeCard = true;
        }
        else if (window.Type == "Openable")
        {
            showOpenableTypeCard = true;
        }
        if (window.Type == null || newItem.Width == 0 || newItem.Height == 0 || newItem.Glass == null
            || customer.MobileNumber==0
            || string.IsNullOrEmpty(customer.CustomerName))
        {
            JSRuntime.InvokeVoidAsync("alert", "Please Enter Data!");
        }
        else
        {
            if (quotation.Items.Count == 0)
            {
                quotation.Items.Add(newItem);
                newItem = new ItemDetails();
                window = new WindowDetails();
                glassDetails = new GlassDetails();
            }
            else
            {
                bool itemExists = false;
                foreach (var item in quotation.Items)
                {
                    if (item.Window.Type == window.Type && newItem.Width == item.Width && newItem.Height == item.Height && newItem.Glass == item.Glass)
                    {
                        item.QTY = item.QTY + newItem.QTY;
                        item.WindowsAmount = (newItem.SQFT3 * 100) * item.QTY;
                        item.GlassAmount = (newItem.SQFT3 * 200) * item.QTY;
                        newItem = new ItemDetails ();
                        window = new WindowDetails();
                        glassDetails = new GlassDetails();
                        itemExists = true;
                        break;
                    }
                }
                if (itemExists)
                {
                    JSRuntime.InvokeVoidAsync("alert", "Quotation Updated Successfully");
                }
                else
                {
                    quotation.Items.Add(newItem);
                    newItem = new ItemDetails ();
                    glassDetails = new GlassDetails();
                    window = new WindowDetails();
                }
            }     
        }
    }
    protected override void OnInitialized()
    {
        glassList = DalGlassDetails.GetAllGlassDetails();
        windowList = DalWindowDetails.GetAllWindowDetails();
        companiesList = DalCompanies.GetAllCompaniesDetails();
        quotation.Date = DateTime.Now;
    }
    private void DeleteItem(ItemDetails item)
    {
        quotation.Items.Remove(item);
        totalHeight -= (item.Height * item.QTY);
        totalWidth -= (item.Width * item.QTY);
        if(totalHeight==0 || totalWidth==0)
        {
            showMaterialSelection = false;
        }
    }
    private void OnWindowChanged(ChangeEventArgs e)
    {
        selectedWindowId = int.Parse(e.Value.ToString());
        window = windowList.FirstOrDefault(w => w.WindowsId == selectedWindowId);

    }
    private void OnGlassChanged(ChangeEventArgs e)
    {
        selectedGlassId = int.Parse(e.Value.ToString());
        glassDetails = glassList.FirstOrDefault(g => g.GId == selectedGlassId);
    }
    private void OnProfileChanged(ChangeEventArgs e)
    {
        var values = e.Value?.ToString()?.Split(','); 

        selectedProfileId = float.Parse(values[0]);
        selectedBeadingId = float.Parse(values[1]);
        JSRuntime.InvokeVoidAsync("alert", selectedProfileId);
        JSRuntime.InvokeVoidAsync("alert", selectedBeadingId);

    }
    private void OnGasketOptionChanged(ChangeEventArgs e)
    {
        selectedGasketOption = e.Value.ToString();
    }
    private void OnCompanyChanged(ChangeEventArgs e)
    {
        selectedCompanyId = int.Parse(e.Value.ToString());
        company = companiesList.FirstOrDefault(c => c.CompanyId == selectedCompanyId);
        if (company != null)
        {
            LoadProfiles(company);
        }
    }
    private void LoadProfiles(CompanyDetails companyDetails)
    {
        if(companyDetails.CompanyName=="SkyPenDetails")
        {
            skyPenDetails = DalSkyPenDetails.GetAllSkyPenDetails();
        }
        else if (companyDetails.CompanyName == "TurkProfilDetails")
        {
            turkProfilDetails = DalTurkProfilDetails.GetAllTurkProfilDetails();
        }
    }
    private  async Task AddCustomer(CustomerDetails model)
    {
        List<CustomerDetails> customerDetails=DalCustomerDetails.GetAllCustomerDetails();
        if(customerDetails.Count==0)
        {
            SqlParameter[] parameters = new SqlParameter[]
            {
                new SqlParameter("@CustomerName", model.CustomerName),
                new SqlParameter("@Address", model.Address),
                new SqlParameter("@MobileNumber", model.MobileNumber)
            };
            await DalCrud.Manipulate("AddCustomerDetails",parameters);
            // await JSRuntime.InvokeVoidAsync("alert", "Customer Added");
        }
        else
        {
            foreach(var customer in customerDetails)
            {
                if(model.MobileNumber==customer.MobileNumber)
                {
                    // await JSRuntime.InvokeVoidAsync("alert", "Customer Already Exist (IF)");
                    break;
                }
                else
                {
                    SqlParameter[] parameters = new SqlParameter[]
                {
                new SqlParameter("@CustomerName", model.CustomerName),
                new SqlParameter("@Address", model.Address),
                new SqlParameter("@MobileNumber", model.MobileNumber)
                };
                    await DalCrud.Manipulate("AddCustomerDetails",parameters);
                    //await JSRuntime.InvokeVoidAsync("alert", "Customer Added Successfuly(Else)");
                    break;
                }
            }
        }
    }
    private async Task AddQuotationDetail(QuotationDetails model)
    {
        SqlParameter[] parameters = new SqlParameter[]
            {
                new SqlParameter("@QuotationId", model.QuotationId),
                new SqlParameter("@CustomerMobile", model.CustomerMobile),
                new SqlParameter("@Date", model.Date),
                new SqlParameter("@Remarks", model.Remarks)
            };
        await DalCrud.Manipulate("AddQuotationDetails", parameters);
        //await JSRuntime.InvokeVoidAsync("alert", "Quotation Added");
    }
    private async Task AddItemDetails(QuotationDetails model)
    {
        foreach(var item in model.Items)
        {
            SqlParameter[] parameters = new SqlParameter[]
            {
                new SqlParameter("@GId", item.GId),
                new SqlParameter("@QuotationId", item.QuotationId),
                new SqlParameter("@WindowsId", item.WindowsId),
                new SqlParameter("@Width", item.Width),
                new SqlParameter("@Height", item.Height),
                new SqlParameter("@WindowsRate", item.WindowsRate),
                new SqlParameter("@GlassRate", item.GlassRate)

            };
            await DalCrud.Manipulate("AddItemDetails", parameters);
           // await JSRuntime.InvokeVoidAsync("alert", "Item Added");

        }
    }
    private async Task OnSubmit()
    {
        quotation.CustomerMobile = customer.MobileNumber;
        await AddCustomer(customer);
        await AddQuotationDetail(quotation);
        await AddItemDetails(quotation);
        await JSRuntime.InvokeVoidAsync("alert", "Quotation Submitted Successfully");
    } 
}

