@page "/login"
@using ClassLibraryDal;
@using ClassLibraryModel;
@using QuotationCalculator.Authentication
@inject IJSRuntime JSRuntime;

<PageTitle>Login</PageTitle>

<div class="container">
    <h1>Login</h1>

    <!-- Login Form -->
    <div class="form-container">
        <form @onsubmit="HandleSubmit">
            <div class="form-group">
                <label for="loginEmail">Email address</label>
                <input type="email" class="form-control" id="loginEmail" placeholder="Enter email" @bind-value="userDetails.EmailAddress">
            </div>
            <div class="form-group">
                <label for="loginPassword">Password</label>
                <input type="password" class="form-control" id="loginPassword" placeholder="Password" @bind-value="userDetails.Pass">
            </div>
            <button type="submit" class="btn btn-primary">Login</button>
        </form>
    </div>

</div>


@code {
    UserDetails userDetails = new UserDetails();

    private async void HandleSubmit()
    {
        UserDetails userFound = DalUserDetails.Login_User(userDetails.EmailAddress, userDetails.Pass);
        if (userFound != null)
        {
            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(new UserSession
                {
                    UserName = userFound.FullName,
                    Role = userFound.Role
                });
            NavigationManager.NavigateTo("/", true);
        }
        else
        {
            JSRuntime.InvokeVoidAsync("alert", "User Not Found");
        }
    }
}