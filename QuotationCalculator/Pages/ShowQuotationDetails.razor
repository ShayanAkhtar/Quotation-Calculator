@page "/quotationdetails/{QuotationId}"
@using System.Data
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>Quotation Details</h3>

@if (quotation == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Quotation ID: @quotation.QuotationId</h5>
            <p class="card-text"><strong>Date:</strong> @quotation.Date.ToString("yyyy-MM-dd")</p>
            <p class="card-text"><strong>Customer Mobile:</strong> @quotation.CustomerMobile</p>
            <p class="card-text"><strong>Remarks:</strong> @quotation.Remarks</p>
        </div>
    </div>

    <h4>Item Details</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Item ID</th>
                <th>Glass ID</th>
                <th>Windows ID</th>
                <th>Width</th>
                <th>Height</th>
                <th>Windows Rate</th>
                <th>Glass Rate</th>
            </tr>
        </thead>
        <tbody>
            @if (itemDetails == null || !itemDetails.Any())
            {
                <tr>
                    <td colspan="7"><em>No items found.</em></td>
                </tr>
            }
            else
            {
                @foreach (var item in itemDetails)
                {
                    <tr>
                        <td>@item.ItemId</td>
                        <td>@item.GId</td>
                        <td>@item.WindowsId</td>
                        <td>@item.Width</td>
                        <td>@item.Height</td>
                        <td>@item.WindowsRate</td>
                        <td>@item.GlassRate</td>
                    </tr>
                }
            }
        </tbody>
    </table>
    <button class="btn btn-primary" @onclick="DownloadPdf">Download PDF</button>
    <button class="btn btn-secondary" @onclick="GoBack">Back</button>
}

@code {
    [Parameter]
    public string QuotationId { get; set; }

    private QuotationDetails quotation;
    private List<ItemDetails> itemDetails;

    protected override async Task OnInitializedAsync()
    {
        quotation = await DalQuotationsDetails.GetQuotationById(QuotationId);
        itemDetails = await DalItemDetails.GetItemDetailsByQuotationId(QuotationId);
    }

    private async Task DownloadPdf()
    {
        byte[] pdfBytes = PdfGenerator.CreatePdf(quotation, itemDetails);
        var fileName = "QuotationDetails.pdf";
        await JSRuntime.InvokeVoidAsync("saveAsFile", fileName, Convert.ToBase64String(pdfBytes));
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/quotationslist");
    }
}
